import java.util.*;
public class Graph {
    private int V;
    private LinkedList <Integer>[] adjacency; // declaration of an array of LinkedList

    public Graph(int nodes) {
        V = nodes;
        adjacency = new LinkedList[nodes]; // adjacency is the LinkedList of nodes
        for (int i = 0; i < nodes; i++) {
            adjacency[i] = new LinkedList<>();
        }
    }
    
    // u -> v ( u = start vertex, v = final vertex)
    public void addEdge(int u, int v) {
        adjacency[u].add(v); // adding a pointer or another connection or another node to the two vertices
    }
    
    public void BFS(int startVertex) {
        boolean visited[] = new boolean[V];
        Queue<Integer> queue = new LinkedList<>();
        visited[startVertex] = true;
        queue.offer(startVertex) ;
        
        while(!queue.isEmpty()) {
            int vertex = queue.poll();
            System.out.print(vertex + " ");
            
            for(Integer neighbor : adjacency[vertex]){
                if(!visited[neighbor]){
                    visited[neighbor] = true;
                    queue.offer(neighbor);
                }
            }
        }
    }
	public static void main(String[] args) {
		System.out.println("Hello World");
		Graph g = new Graph(7); // number of nodes that are in the binary graph 
		g.addEdge(0,1);
		g.addEdge(0,2);
		g.addEdge(1,3);
		g.addEdge(1,4);
		g.addEdge(2,5);
		g.addEdge(2,6);
		
		int startVertex = 0;
		g.BFS(startVertex);
		
	}
}
